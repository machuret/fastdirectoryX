import type { NextApiRequest, NextApiResponse } from 'next';
import prisma from '@/lib/prisma';
import { getSession } from 'next-auth/react';

// Helper function to get or create the main site settings record
async function getOrCreateSiteSettings() {
  let settings = await prisma.siteSettings.findFirst();
  if (!settings) {
    // You can define default values here if needed
    settings = await prisma.siteSettings.create({
      data: {
        // id will be generated by cuid()
        site_name: 'My Awesome Site',
        admin_email: '',
        contact_form_title: 'Contact Us',
        contact_form_details: 'Please fill out the form below to get in touch.',
      },
    });
  }
  return settings;
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  console.log('API ROUTE: /api/admin/settings/contact-form-config hit'); // Log when route is hit
  const session = await getSession({ req });

  console.log('API ROUTE: Session object:', JSON.stringify(session, null, 2)); // Log the session object

  if (!session || !session.user?.isAdmin) {
    console.log('API ROUTE: Unauthorized access attempt. Session valid:', !!session, 'isAdmin:', session?.user?.isAdmin);
    return res.status(401).json({ message: 'Unauthorized' });
  }

  console.log('API ROUTE: Authorized. User is admin.'); // Log if authorized

  if (req.method === 'GET') {
    try {
      const settings = await getOrCreateSiteSettings();
      res.status(200).json({
        admin_email: settings.admin_email,
        contact_form_title: settings.contact_form_title,
        contact_form_details: settings.contact_form_details,
      });
    } catch (error) {
      console.error('Error fetching contact form settings:', error);
      res.status(500).json({ message: 'Error fetching settings', error: (error as Error).message });
    }
  } else if (req.method === 'POST') {
    try {
      const { admin_email, contact_form_title, contact_form_details } = req.body;

      const currentSettings = await getOrCreateSiteSettings();

      const updatedSettings = await prisma.siteSettings.update({
        where: { id: currentSettings.id },
        data: {
          admin_email,
          contact_form_title,
          contact_form_details,
        },
      });
      res.status(200).json({
        message: 'Settings updated successfully',
        settings: {
          admin_email: updatedSettings.admin_email,
          contact_form_title: updatedSettings.contact_form_title,
          contact_form_details: updatedSettings.contact_form_details,
        }
      });
    } catch (error) {
      console.error('Error updating contact form settings:', error);
      res.status(500).json({ message: 'Error updating settings', error: (error as Error).message });
    }
  } else {
    res.setHeader('Allow', ['GET', 'POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}
